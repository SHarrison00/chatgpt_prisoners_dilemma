# Reorder data (easier to viz)
popularmusic_long <- popularmusic_long[order(popularmusic_long$sexyback),]
# Add model maximum
head(popularmusic_long)
# maxima1
popularmusic_long = rbind(popularmusic_long, c(0.8299, 0, "energy", 0))
popularmusic_long = rbind(popularmusic_long, c(0.8299, 0, "tempo", 0))
popularmusic_long = rbind(popularmusic_long, c(0.8299, 0, "valence", 0))
# maxima2
popularmusic_long = rbind(popularmusic_long, c(0.8299, 0, "energy", 1))
popularmusic_long = rbind(popularmusic_long, c(0.8299, 0, "tempo", 0))
popularmusic_long = rbind(popularmusic_long, c(0.8299, 0, "valence", 0))
head(popularmusic_long)
# # Plot numerical variables
# ggplot(popularmusic_long, aes(value, danceability, colour=sexyback)) + geom_point() + facet_wrap(~ variable, scale="free_x") +
#   labs(title= "Danceability vs Energy, Valence and Tempo",
#        subtitle= "Whereabouts does 'SexyBack' lie within our dataset?",
#        y = "Danceability",
#        x = "Index",
#        caption="*1.\n 2.).") +
#   theme(plot.title=element_text(face="bold"))
#
# # Extract row
# popularmusic %>% filter(str_detect(track, "SexyBack")) %>% select(track, danceability, energy, valence, tempo)
# Install reshape2 library
install.packages("reshape2", repos = "http://cran.us.r-project.org")
# Load packages
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(broom))
suppressPackageStartupMessages(library(dplyr))
# Load into R
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(lubridate))
# Install reshape2 library
install.packages("reshape2", repos = "http://cran.us.r-project.org")
suppressPackageStartupMessages(library(reshape2))
# Load
load('music.rda')
# Convert `timesig` to factor variable.
music$timesig <- as.factor(music$timesig)
# Convert `key_name` to factor variable.
music$key_name <- as.factor(music$key_name)
# Drop 'url' variable
subset(music, select = -url) -> music
# Convert `release_date` to date variable and add `release_year` column
music$release_date <- ymd(music$release_date, truncated=2)
music$release_year <- as.numeric(format(music$release_date,'%Y'))
# Convert `playlist` to factor variable with 6 levels.
music %>% mutate(playlist = substring(playlist,9)) -> music
music$playlist <- ordered(music$playlist,
levels = c("50s", "60s", "70s", "80s", "90s", "2000s", "2010s"))
# Plot histogram
ggplot(music, aes(x=popularity)) +
geom_histogram(fill="cadetblue4", binwidth = 2) +
labs(title= "Music Popularity Distribution",
y = "Frequency",
x = "Popularity Index",
caption="Dataset: Music from playlists for every decade up to 2020. E.g. All Out 50s, All Out 60s etc. ") +
theme(plot.title=element_text(face="bold"))
# Extract music data without descriptive variables, e.g. track, artist etc.
subset(music, select = -c(track, artist, playlist, release_date)) -> music2
# Pivot numerical music data
subset(music2, select = -c(explicit, key_name, timesig) ) %>%
pivot_longer(!popularity, names_to = "variable", values_to = "value") -> music2_long
# Plot numerical variables
ggplot(music2_long, aes(value, popularity)) + geom_point(color="cadetblue4") + facet_wrap(~ variable, scale="free_x") +
labs(title= "Popularity vs Predictor variables",
subtitle= "(Numerical variables only)",
y = "Frequency",
x = "Popularity Index",
caption="*Provided we do not partition the dataset.") +
theme(plot.title=element_text(face="bold"))
# Distinguish between popular and not popular music
music %>% filter(popularity >= 24) -> popularmusic
music %>% filter(popularity < 24) -> notpopularmusic
install.packages("reshape2", repos = "http://cran.us.r-project.org")
# Extract numerical variables
subset(popularmusic, select = -c(key_name, explicit, timesig, key_name, track, artist, playlist, release_date)) -> popularmusicnum
# Melt correlation matrix
cormat <- round(cor(popularmusicnum),2)
melted_cormat <- melt(cormat)
# Examine bivariate correlations
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs(title= "Correlation Heatmap",
subtitle= "(Numerical variables only)",
caption="*Using popular music data only.") +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_text(angle = 90),
plot.title=element_text(face="bold"))
with(popularmusicnum, cor(energy,loudness))
# Firstly, create an 'original' model - which contains all the predictors
omod = lm(popularity ~ acousticness + danceability + duration + energy + instrumentalness + liveness + loudness + speechiness + tempo + valence + release_year + explicit, popularmusic)
# Run stepwise algorithm to choose model using AIC
step(omod, trace=0)
# Define reduced model
lmod = lm(popularity ~ acousticness + danceability + duration + loudness + valence + release_year + explicit, data = popularmusic)
# Perform hypothesis test comparing reduced model vs. original model
anova(lmod, omod)
# Check constant variance
par(mfrow=c(2,1),mar=c(2.6,2.6,2.1,0.1),mgp=c(1.5,0.5,0))
plot(lmod, 1)
plot(lmod, 3)
# Check error normality
par(mfrow=c(1,1))
plot(lmod, 2)
# Create (temp) model with 'popularity' squared transformation applied
lmod2 = lm(popularity^2 ~ acousticness + danceability + duration + loudness + valence + release_year + explicit, data = popularmusic)
# Check error normality
par(mfrow=c(1,2))
plot(lmod, 2, main="Not applying transformation\n", )
plot(lmod2, 2, main="Applying transformation\n")
# Create model with log 'duration' transformation applied
tmod = lm(popularity^2 ~ acousticness + danceability + log(duration) + loudness + valence + release_year + explicit, data = popularmusic)
# Compare the partial residual plots
par(mfrow=c(1,2) ,mar=c(2.6,2.6,2.1,0.1),mgp=c(1.5,0.5,0))
termplot(lmod, partial.resid=TRUE, terms=3, main="Not applying transformation")
termplot(tmod, partial.resid=TRUE, terms=3, transform.x=TRUE, main="Applying transformation")
# Compare adjusted R^2 values
paste0("Adjusted R-squared value, without transformation: ", round(glance(lmod)[c(2)][[1]], 4))
paste0("Adjusted R-squared value, with transformation: ", round(glance(tmod)[c(2)][[1]], 4))
# Cook distance and leverage
par(mfrow=c(1,2),mar=c(2.6,2.6,2.1,0.1),mgp=c(1.5,0.5,0))
plot(tmod, 4)
plot(tmod, 5)
tail(sort(abs(rstudent(tmod))))
qt(0.05/(854*2), 854-7-1)
# Whole dataset
omod = lm(popularity ~ acousticness + danceability + duration + energy + instrumentalness + liveness + loudness + speechiness + tempo + valence + release_year + explicit, music)
# Adjusted R^2 value
paste0("Adjusted R-squared value, without partition: ", round(glance(omod)[c(2)][[1]], 4))
# Partitioned dataset
omod = lm(popularity ~ acousticness + danceability + duration + energy + instrumentalness + liveness + loudness + speechiness + tempo + valence + release_year + explicit, popularmusic)
# Adjusted R^2 value
paste0("Adjusted R-squared value, with partition: ", round(glance(omod)[c(2)][[1]], 4))
# Filter music after 2000
music %>% filter(playlist %in% c("2000s", "2010s")) -> adele
# Create 'adele' variable
library(dplyr)
adele$adele <- ifelse(grepl("Adele", adele$artist), 1, 0)
adele <- adele %>% relocate(adele, .before = playlist)
# Drop 'track', 'artist', 'playlist', 'release_date'
subset(adele, select = -c(track, artist, playlist, release_date)) -> adele
# Pivot data and plot
subset(adele, select = -c(adele, explicit, key_name, timesig) ) %>% pivot_longer(!popularity, names_to = "variable", values_to = "value") -> adelelong
ggplot(adelelong, aes(value, popularity)) + geom_point() + facet_wrap(~ variable, scale="free_x")
# Cut out unused variables for simplicity
subset(music, select = -c(track, artist, danceability,energy, loudness, speechiness, acousticness, instrumentalness, liveness, tempo, timesig, duration, explicit, popularity)) -> musicCutDown
#Plot
ggplot(musicCutDown,aes(playlist,valence)) + geom_boxplot(fill="cadetblue") +
labs(title= "Valence boxplot over time",
subtitle= "How has valence changed over time?",
y = "Valence",
x = "Playlist",
caption="*1. All of the music dataset included.\n 2. Mean valence by playlist indicated by pink points.") +
theme(plot.title=element_text(face="bold")) +
stat_summary(fun = mean, geom = "point", col = "deeppink")
with(popularmusicnum, cor(energy,valence))
with(popularmusicnum, cor(tempo,valence))
with(popularmusicnum, cor(energy,tempo))
# Smaller model
smod = lm(danceability ~ valence + energy + tempo, popularmusic)
# Larger (higher-order) model
hmod = lm(danceability ~ tempo + energy*valence, popularmusic)
# F-test
anova(smod, hmod)
par(mfrow=c(2,2),mar=c(2.6,2.6,2.1,0.1),mgp=c(1.5,0.5,0))
plot(hmod)
summary(hmod)
idx <- 1:n/100
idx <- 1:1000/100
idx
ls(rm=list())
ls(rm=list())
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
solution<-TRUE
tser01
knitr::opts_chunk$set(echo = TRUE)
solution<-TRUE
#************************#
#!!! VERY IMPORTANT !!!
#************************#
# Please, replace the "2" inside set.seed() with your
# unique seed
set.seed(56445)
#************************#
#!!! VERY IMPORTANT !!!
#
#  DON'T MODIFY THE LINES
#  IN THE REMAINING OF
#  THIS R CHUNK
#
#************************#
# Loading data
load("lts0.Rda")
# Extracting time series
idx1 <- sample(1:500,size=4,replace=FALSE)
idx2 <- sample(501:1000,size=3,replace=FALSE)
idx3 <- sample(1001:1500,size=3,replace=FALSE)
tser01 <- lts0[[idx1[1]]]
tser02 <- lts0[[idx1[2]]]
tser03 <- lts0[[idx1[3]]]
tser04 <- lts0[[idx1[4]]]
tser05 <- lts0[[idx2[1]]]
tser06 <- lts0[[idx2[2]]]
tser07 <- lts0[[idx2[3]]]
tser08 <- lts0[[idx3[1]]]
tser09 <- lts0[[idx3[2]]]
tser10 <- lts0[[idx3[3]]]
# Test you've got the time series in the workspace
par(mfrow=c(2,2))
plot(tser01)
plot(tser02)
plot(tser03)
plot(tser04)
par(mfrow=c(3,1))
plot(tser05)
plot(tser06)
plot(tser07)
par(mfrow=c(3,1))
plot(tser08)
plot(tser09)
plot(tser10)
# Back to one plot per window
par(mfrow=c(1,1))
tser01
acf(tser01)
pacf(tser01)
par(mfrow=c(1,2))
acf(tser01)
pacf(tser01)
par(mfrow=c(1,2))
acf(tser01)
pacf(tser01)
fit <- arima(tser01, order(0, 0, 1))
fit <- arima(tser01, order=(0, 0, 1))
fit <- arima(tser01, order=(0,0,1))
fit <- arima(tser01, order=c(0,0,1))
print(fit)
fit <- arima(tser01, order=c(0,0,2))
print(fit)
fit <- arima(diff(tser01), order=c(0,0,1))
print(fit)
fit <- arima(diff(tser01), order=c(0,1,1))
print(fit)
acf(diff(tser01))
pacf(diff(tser01))
x = tser01[1:96]
y = tser01[97:192]
ks.test(x,y)
x = tser01[1:150]
y = tser01[151:300]
ks.test(x,y)
plot(tser02)
x = tser02[1:150]
y = tser02[151:300]
ks.test(x,y)
x = tser02[1:150]
y = tser02[151:300]
ks.test(x,y)
x = tser03[1:150]
y = tser03[151:300]
ks.test(x,y)
x = tser01[1:150]
y = tser01[151:300]
ks.test(x,y)
x = tser02[1:150]
y = tser02[151:300]
ks.test(x,y)
par(mfrow=c(1,2))
acf(tser02)
pacf(tser02)
par(mfrow=c(1,2))
acf(tser02)
pacf(tser02)
par(mfrow=c(1,2))
acf(diff(tser02))
pacf(diff(tser02))
par(mfrow=c(1,2))
acf(tser02)
pacf(tser02)
fit <- arima(tser02, order=c(1,0,1))
print(fit)
fit <- arima(tser02, order=c(2,0,1))
print(fit)
fit <- arima(tser02, order=c(1,0,2))
print(fit)
plot(tser03)
x = tser03[1:150]
y = tser03[151:300]
ks.test(x,y)
plot(tser03)
par(mfrow=c(1,2))
acf(tser02)
pacf(tser02)
par(mfrow=c(1,2))
acf(tser03)
pacf(tser03)
par(mfrow=c(1,2))
acf(tser03)
pacf(tser03)
fit <- arima(tser03, order=c(1,0,0))
print(fit)
fit <- arima(tser03, order=c(2,0,0))
print(fit)
tsdiag(fit)
tsdiag(fit_ar01)
fit_ar01 <- arima(tser03, order=c(1,0,0))
print(fit_ar01)
fit_ar02 <- arima(tser03, order=c(2,0,0))
print(fit_ar02)
tsdiag(fit_ar01)
plot(tser04)
x = tser04[1:150]
y = tser04[151:300]
ks.test(x,y)
plot(diff(tser04))
x = diff(tser04)[1:150]
y = diff(tser04)[151:300]
ks.test(x,y)
par(mfrow=c(1,2))
acf(diff(tser04))
pacf(diff(tser04))
fit <- arima(tser04, order=c(1,1,0))
print(fit)
fit <- arima(tser04, order=c(1,1,1))
print(fit)
fit <- arima(tser04, order=c(2,1,0))
print(fit)
fit <- arima(tser04, order=c(2,1,1))
print(fit)
fit <- arima(diff(tser04), order=c(1,1,0))
print(fit)
fit <- arima(diff(tser04), order=c(1,1,0))
print(fit)
fit <- arima(tser04, order=c(2,1,1))
print(fit)
tsdiag(fit_arima010101)
fit_arima010101 <- arima(tser04, order=c(1,1,1))
print(fit)
fit_arima020100 <- arima(tser04, order=c(2,1,0))
print(fit)
tsdiag(fit_arima010101)
tsdiag(fit_arima020100)
fit <- arima(tser04, order=c(2,1,0))
print(fit)
fit <- arima(tser04, order=c(2,1,0))
print(fit)
fit <- arima(tser04, order=c(1,1,1))
print(fit)
fit <- arima(tser04, order=c(2,1,0))
print(fit)
fit <- arima(tser04, order=c(2,1,0))
print(fit)
rm(list = ls())
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
help(t.test)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# install.packages("pwr")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
data
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
View(data)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
View(data)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
data$Treatment_Strategy <- factor(data$Treatment_Strategy,
levels = c("A0.F0", "A0.F1", "A1.F0", "A1.F1", "A2.F0", "A2.F1"))
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
# boxplot
ggplot(data, aes(x = Treatment_Strategy, y = Yi, fill = Treatment_Strategy)) +
geom_boxplot() +
scale_fill_manual(values = my_colors) +
labs(x = "Treatment Combination", y = "Response, Y\n(Cooperation measure)",
title = "Response against Treatment Combination") +
facet_wrap(~ factor(Treatment_Strategy, levels = unique(Treatment_Strategy)),
ncol = 3)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
# boxplot
ggplot(data, aes(x = Treatment_Strategy, y = Yi, fill = Treatment_Strategy)) +
geom_boxplot() +
scale_fill_manual(values = my_colors) +
labs(x = "Treatment Combination", y = "Response, Y\n(Cooperation measure)",
title = "Response against Treatment Combination") +
facet_wrap(~ factor(Treatment, levels = unique(Treatment)))
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
# boxplot
ggplot(data, aes(x = Strategy, y = Yi, fill = Strategy)) +
geom_boxplot() +
scale_fill_manual(values = my_colors) +
labs(x = "Treatment Combination", y = "Response, Y\n(Cooperation measure)",
title = "Response against Treatment Combination") +
facet_wrap(~ factor(Treatment, levels = c("A0", "A1", "A2")))
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
source("~/Documents/data_sci/chatgpt_prisoners_dilemma/analysis.R", echo=TRUE)
